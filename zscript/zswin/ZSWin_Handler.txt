
class ZSWin_Handler : EventHandler
{
	const TIC = 35;
	const ZVERSION = "0.1";
	
	bool bDebug, bDebugIsUpdating;
	private int debugPlayer;
	void DebugOut(string Text, int color = Font.CR_Red, uint tics = 175, bool append = false)
	{ 
		if (bDebug) 
		{
			bool bAdded = true;
			int sameIndex = 0;
			
			for (int i = 0; i < dar_DebugMsgs.Size(); i++)
			{
				if (ZText(dar_DebugMsgs[i]).Text == Text)
					bAdded = false;
			}
			
			if (bAdded)
				dar_DebugMsgs.Push(new("ZText").DebugInit(Text, color, tics, append)); 
		}
	}
	private Array<ZText> dar_DebugMsgs;
	int GetDebugSize() { return dar_DebugMsgs.Size(); }
	private ZSWindow ncon;
	bool SetWindowToConsole(ZSWindow nwd) { return (ncon = nwd); }
	
	private Array<ZSWin_Base> winStack;
	void AddWindow(ZSWin_Base win) 
	{ 
		if (win != null ? (win.name != "" ? true : false) : false) 
		{
			winStack.Push(win); 
			DebugOut(string.format("ZSWin Handler - Window, %s, for player #%d, with TID, %d added to processing stack.", win.name, win.player, win.tid), Font.CR_Gold);
		}
		else if (win != null)
		{
			win.bDestroyed = true;
			DebugOut("ZSWin Handler: ERROR! - Window with empty name received! Window destroyed.");
		}
		else
			DebugOut("ZSWin Handler: ERROR! - Got a null window!");
	}
	int GetStackSize() { return winStack.Size(); }

	override void OnRegister()
	{
		console.Printf(string.format("ZScript Windows v%s - Welcome!", ZVERSION));
		bDebug = bDebugIsUpdating = false;
		CVar.GetCVar('ZSWINVAR_DEBUG').SetBool(bDebug);
	}

	override void NetworkProcess(ConsoleEvent e)
	{
		if (e.Name == "zswin_debugToggle")
		{
			debugPlayer = e.Player;
			bDebug = !bDebug;
			CVar.GetCVar('ZSWINVAR_DEBUG').SetBool(bDebug);
		}
	}

	// This is the primary draw caller
	override void RenderOverlay(RenderEvent e)
	{
		for (int i = 0; i < winStack.Size(); i++)
		{
			// Check that this window can be drawn for the given player.
			if (consoleplayer == ZSWin_Base(winStack[i]).player)
			{
				let nwd = ZSWindow(winStack[i]);
				WindowProcess_Background(nwd);
				WindowProcess_Border(nwd);
				WindowProcess_Text(nwd);
				WindowProcess_Shapes(nwd);
				// Buttons
				// Graphics
			}
		}
	}
	
	ui private void WindowProcess_Background(ZSWindow nwd)
	{
		if (nwd.BackgroundTexture.IsValid())
		{
			if (nwd.Stretch)
				Screen.DrawTexture(nwd.BackgroundTexture, false,
					nwd.xLocation, nwd.yLocation,
					DTA_Alpha, nwd.BackgroundAlpha,
					DTA_DestWidth, nwd.Width,
					DTA_DestHeight, nwd.Height);
			else
			{
				WindowClip(nwd);
				int tx, ty, w = 0;
				Vector2 txy = TexMan.GetScaledSize(nwd.BackgroundTexture);
				tx = txy.x;
				ty = txy.y;
				do
				{
					int h = 0;
					do
					{
						Screen.DrawTexture (nwd.BackgroundTexture, false,
							nwd.xLocation + (tx * w),
							nwd.yLocation + (ty * h),
							DTA_Alpha, nwd.BackgroundAlpha,
							DTA_DestWidth, tx,
							DTA_DestHeight, ty);
						h++;
					} while ((((h - 1) * ty) + ty)  < nwd.Height);
					w++;
				} while ((((w -1) * tx) + tx) <= nwd.Width);
				WindowClip(set:false);
			}
		}
	}
	
	ui private void WindowProcess_Border(ZSWindow nwd)
	{
		switch (nwd.BorderType)
		{
			case nwd.Game:
				Screen.DrawFrame(nwd.xLocation, nwd.yLocation, nwd.Width, nwd.Height);
				break;
			case nwd.Line:
				Screen.DrawLine(nwd.xLocation, nwd.yLocation, nwd.xLocation + nwd.Width, nwd.yLocation, nwd.BorderColor, int(255 * nwd.BorderAlpha));
				Screen.DrawLine(nwd.xLocation, nwd.yLocation + nwd.Height, nwd.xLocation + nwd.Width, nwd.yLocation + nwd.Height, nwd.BorderColor, int(255 * nwd.BorderAlpha));
				Screen.DrawLine(nwd.xLocation, nwd.yLocation, nwd.xLocation, nwd.yLocation + nwd.Height, nwd.BorderColor, int(255 * nwd.BorderAlpha));
				Screen.DrawLine(nwd.xLocation + nwd.Width, nwd.yLocation, nwd.xLocation + nwd.Width, nwd.yLocation + nwd.Height, nwd.BorderColor, int(255 * nwd.BorderAlpha));
				break;
			case nwd.ThickLine:
				// Top
				Screen.DrawThickLine(nwd.xLocation - nwd.BorderThickness, 
									nwd.yLocation - (nwd.BorderThickness > 1 ? (nwd.BorderThickness % 2 == 0 ? nwd.BorderThickness / 2 : ((nwd.BorderThickness - 1) / 2) + 1) : nwd.BorderThickness), 
									nwd.xLocation + nwd.Width + nwd.BorderThickness, 
									nwd.yLocation - (nwd.BorderThickness > 1 ? (nwd.BorderThickness % 2 == 0 ? nwd.BorderThickness / 2 : ((nwd.BorderThickness - 1) / 2) + 1) : nwd.BorderThickness), 
									nwd.BorderThickness, 
									nwd.BorderColor, 
									int(255 * nwd.BorderAlpha));
				// Bottom
				Screen.DrawThickLine(nwd.xLocation - nwd.BorderThickness, 
									nwd.yLocation + nwd.Height + (nwd.BorderThickness > 1 ? (nwd.BorderThickness % 2 == 0 ? nwd.BorderThickness / 2 : (nwd.BorderThickness - 1) / 2) : nwd.BorderThickness), 
									nwd.xLocation + nwd.Width + nwd.BorderThickness, 
									nwd.yLocation + nwd.Height + (nwd.BorderThickness > 1 ? (nwd.BorderThickness % 2 == 0 ? nwd.BorderThickness / 2 : (nwd.BorderThickness - 1) / 2) : nwd.BorderThickness), 
									nwd.BorderThickness, 
									nwd.BorderColor, 
									int(255 * nwd.BorderAlpha));
				// Left
				Screen.DrawThickLine(nwd.xLocation - (nwd.BorderThickness > 1 ? (nwd.BorderThickness % 2 == 0 ? nwd.BorderThickness / 2 : (nwd.BorderThickness - 1) / 2) : nwd.BorderThickness), 
									nwd.yLocation, 
									nwd.xLocation - (nwd.BorderThickness > 1 ? (nwd.BorderThickness % 2 == 0 ? nwd.BorderThickness / 2 : (nwd.BorderThickness - 1) / 2) : nwd.BorderThickness), 
									nwd.yLocation + nwd.Height, 
									nwd.BorderThickness, 
									nwd.BorderColor, 
									int(255 * nwd.BorderAlpha));
				// Right
				Screen.DrawThickLine(nwd.xLocation + nwd.Width + (nwd.BorderThickness > 1 ? (nwd.BorderThickness % 2 == 0 ? nwd.BorderThickness / 2 : ((nwd.BorderThickness - 1) / 2) + 1) : nwd.BorderThickness), 
									nwd.yLocation, 
									nwd.xLocation + nwd.Width + (nwd.BorderThickness > 1 ? (nwd.BorderThickness % 2 == 0 ? nwd.BorderThickness / 2 : ((nwd.BorderThickness - 1) / 2) + 1) : nwd.BorderThickness), 
									nwd.yLocation + nwd.Height, 
									nwd.BorderThickness, 
									nwd.BorderColor, 
									int(255 * nwd.BorderAlpha));
				break;
			case nwd.ZWin_Border:
				// Top Left Corner
				Screen.DrawTexture(nwd.gfxBorder.Corner_TopLeft, false,
					nwd.xLocation - nwd.gfxBorder.BorderWidth, 
					nwd.yLocation - nwd.gfxBorder.BorderHeight,
					DTA_Alpha, nwd.BorderAlpha,
					DTA_DestWidth, nwd.gfxBorder.BorderWidth,
					DTA_DestHeight, nwd.gfxBorder.BorderHeight);
				// Top Right Corner	
				Screen.DrawTexture(nwd.gfxBorder.Corner_TopRight, false,
					nwd.xLocation + nwd.Width, 
					nwd.yLocation - nwd.gfxBorder.BorderHeight,
					DTA_Alpha, nwd.BorderAlpha,
					DTA_DestWidth, nwd.gfxBorder.BorderWidth,
					DTA_DestHeight, nwd.gfxBorder.BorderHeight);
				// Bottom Left Corner
				Screen.DrawTexture(nwd.gfxBorder.Corner_BottomLeft, false,
					nwd.xLocation - nwd.gfxBorder.BorderWidth, 
					nwd.yLocation + nwd.Height,
					DTA_Alpha, nwd.BorderAlpha,
					DTA_DestWidth, nwd.gfxBorder.BorderWidth,
					DTA_DestHeight, nwd.gfxBorder.BorderHeight);
				// Bottom Right Corner	
				Screen.DrawTexture(nwd.gfxBorder.Corner_BottomRight, false,
					nwd.xLocation + nwd.Width, 
					nwd.yLocation + nwd.Height,
					DTA_Alpha, nwd.BorderAlpha,
					DTA_DestWidth, nwd.gfxBorder.BorderWidth,
					DTA_DestHeight, nwd.gfxBorder.BorderHeight);
				
				Screen.SetClipRect(nwd.xLocation,
								nwd.yLocation - nwd.gfxBorder.BorderHeight,
								nwd.Width,
								nwd.Height + (nwd.gfxBorder.BorderHeight * 2));				
				int w = 0;
				do
				{
					Screen.DrawTexture(nwd.gfxBorder.Side_Top, false,
									nwd.xLocation + (nwd.gfxBorder.BorderWidth * w),
									nwd.yLocation - nwd.gfxBorder.BorderHeight,
									DTA_Alpha, nwd.BorderAlpha,
									DTA_DestWidth, nwd.gfxBorder.BorderWidth,
									DTA_DestHeight, nwd.gfxBorder.BorderHeight);
					Screen.DrawTexture(nwd.gfxBorder.Side_Bottom, false,
									nwd.xLocation + (nwd.gfxBorder.BorderWidth * w),
									nwd.yLocation + nwd.Height,
									DTA_Alpha, nwd.BorderAlpha,
									DTA_DestWidth, nwd.gfxBorder.BorderWidth,
									DTA_DestHeight, nwd.gfxBorder.BorderHeight);
					w++;
				} while (((w - 1) * nwd.gfxBorder.BorderWidth) + nwd.gfxBorder.BorderWidth <= nwd.Width);
				WindowClip(set:false);
				
				Screen.SetClipRect(nwd.xLocation - nwd.gfxBorder.BorderWidth,
								nwd.yLocation,
								nwd.Width + (nwd.gfxBorder.BorderWidth * 2),
								nwd.Height);
				int h = 0;
				do
				{
					Screen.DrawTexture(nwd.gfxBorder.Side_Left, false,
									nwd.xLocation - nwd.gfxBorder.BorderWidth,
									nwd.yLocation + (nwd.gfxBorder.BorderHeight * h),
									DTA_Alpha, nwd.BorderAlpha,
									DTA_DestWidth, nwd.gfxBorder.BorderWidth,
									DTA_DestHeight, nwd.gfxBorder.BorderHeight);
					Screen.DrawTexture(nwd.gfxBorder.Side_Right, false,
									nwd.xLocation + nwd.Width,
									nwd.yLocation + (nwd.gfxBorder.BorderHeight * h),
									DTA_Alpha, nwd.BorderAlpha,
									DTA_DestWidth, nwd.gfxBorder.BorderWidth,
									DTA_DestHeight, nwd.gfxBorder.BorderHeight);
					h++;
				} while (((h - 1) * nwd.gfxBorder.BorderHeight) + nwd.gfxBorder.BorderHeight <= nwd.Height);
				WindowClip(set:false);
				break;
		}		
	}
	
	ui private void WindowProcess_Text(ZSWindow nwd)
	{
		WindowClip(nwd);
		BrokenLines blText;
		// Title
		switch (nwd.Title.TextWrap)
		{
			case ZText.wrap:
				blText = nwd.Title.font.BreakLines(nwd.Title.Text, nwd.Width);
				for (int i = 0; i < blText.Count(); i++)
					Screen.DrawText(nwd.Title.font,
								nwd.Title.CRColor,
								nwd.Title.GetAlignment(nwd.xLocation, nwd.Width, blText.StringAt(i)),
								nwd.yLocation + nwd.Title.yLocation + (i * nwd.Title.font.GetHeight()),
								blText.StringAt(i),
								DTA_Alpha, nwd.Title.Alpha);
				break;
			case ZText.dynwrap:
				blText = nwd.Title.font.BreakLines(nwd.Title.Text, nwd.Width /* + resize handlers*/);
				for (int i = 0; i < blText.Count(); i++)
					Screen.DrawText(nwd.Title.font,
								nwd.Title.CRColor,
								nwd.Title.GetAlignment(nwd.xLocation, nwd.Width, blText.StringAt(i)),
								nwd.yLocation + nwd.Title.yLocation + (i * nwd.Title.font.GetHeight()),
								blText.StringAt(i),
								DTA_Alpha, nwd.Title.Alpha);
				break;
			default:
				Screen.DrawText(nwd.Title.font, 
							nwd.Title.CRColor, 
							nwd.Title.GetAlignment(nwd.xLocation, nwd.Width, nwd.Title.Text), 
							nwd.yLocation + nwd.Title.yLocation, 
							nwd.Title.Text, 
							DTA_Alpha, nwd.Title.Alpha);
				break;
		}
		
		// Window Text Array
		for (int i = 0; i < nwd.GetTextSize(); i++)
		{
			switch (nwd.GetText(i).TextWrap)
			{
				case ZText.wrap:
					blText = nwd.GetText(i).font.BreakLines(nwd.GetText(i).Text, nwd.Width);
					for (int j = 0; j < blText.Count(); j++)
						Screen.DrawText(nwd.GetText(i).font,
									nwd.GetText(i).CRColor,
									nwd.GetText(i).GetAlignment(nwd.xLocation, nwd.Width, blText.StringAt(i)),
									nwd.yLocation + nwd.GetText(i).yLocation + (j * nwd.Title.font.GetHeight()),
									blText.StringAt(j),
									DTA_Alpha, nwd.GetText(i).Alpha);
					break;
				case ZText.dynwrap:
					blText = nwd.GetText(i).font.BreakLines(nwd.GetText(i).Text, nwd.Width /* + resize handlers*/);
					for (int j = 0; j < blText.Count(); j++)
						Screen.DrawText(nwd.GetText(i).font,
									nwd.GetText(i).CRColor,
									nwd.GetText(i).GetAlignment(nwd.xLocation, nwd.Width, blText.StringAt(i)),
									nwd.yLocation + nwd.GetText(i).yLocation + (j * nwd.Title.font.GetHeight()),
									blText.StringAt(j),
									DTA_Alpha, nwd.GetText(i).Alpha);
					break;
				default:
					Screen.DrawText(nwd.GetText(i).font, 
								nwd.GetText(i).CRColor, 
								nwd.GetText(i).GetAlignment(nwd.xLocation, nwd.Width, nwd.Title.Text), 
								nwd.yLocation + nwd.GetText(i).yLocation, 
								nwd.GetText(i).Text, 
								DTA_Alpha, nwd.GetText(i).Alpha);
					break;
			}
		}
		WindowClip(set:false);
	}
	
	ui private void WindowProcess_Shapes(ZSWindow nwd)
	{
		int originx, originy,
			cxstart, cystart, 
			cxend, cyend, 
			ang;
		
		WindowClip(nwd);
		for (int i = 0; i < nwd.GetShapeSize(); i++)
		{	
			switch (nwd.GetShape(i).Type)
			{
				case ZShape.thinline:
					Screen.DrawLine(nwd.xLocation + nwd.GetShape(i).x_Start, 
									nwd.yLocation + nwd.GetShape(i).y_Start, 
									nwd.xLocation + nwd.GetShape(i).x_End, 
									nwd.yLocation + nwd.GetShape(i).y_End, 
									nwd.GetShape(i).Color, 
									int(nwd.GetShape(i).Alpha * 255));
					break;
				case ZShape.thickline:
					Screen.DrawThickLine(nwd.xLocation + nwd.GetShape(i).x_Start, 
										nwd.yLocation + nwd.GetShape(i).y_Start, 
										nwd.xLocation + nwd.GetShape(i).x_End, 
										nwd.yLocation + nwd.GetShape(i).y_End, 
										nwd.GetShape(i).Thickness, 
										nwd.GetShape(i).Color, 
										int(nwd.GetShape(i).Alpha * 255));
					break;
				case ZShape.box:
					// Top
					Screen.DrawLine(nwd.xLocation + nwd.GetShape(i).x_Start - 1,
									nwd.yLocation + nwd.GetShape(i).y_Start - 1,
									nwd.xLocation + nwd.GetShape(i).x_End,
									nwd.yLocation + nwd.GetShape(i).y_Start - 1,
									nwd.GetShape(i).Color,
									int(nwd.GetShape(i).Alpha * 255));
					// Bottom
					Screen.DrawLine(nwd.xLocation + nwd.GetShape(i).x_Start - 1,
									nwd.yLocation + nwd.GetShape(i).y_End,
									nwd.xLocation + nwd.GetShape(i).x_End,
									nwd.yLocation + nwd.GetShape(i).y_End,
									nwd.GetShape(i).Color,
									int(nwd.GetShape(i).Alpha * 255));
					// Left
					Screen.DrawLine(nwd.xLocation + nwd.GetShape(i).x_Start,
									nwd.yLocation + nwd.GetShape(i).y_Start,
									nwd.xLocation + nwd.GetShape(i).x_Start,
									nwd.yLocation + nwd.GetShape(i).y_End,
									nwd.GetShape(i).Color,
									int(nwd.GetShape(i).Alpha * 255));
					// Right
					Screen.DrawLine(nwd.xLocation + nwd.GetShape(i).x_End,
									nwd.yLocation + nwd.GetShape(i).y_Start,
									nwd.xLocation + nwd.GetShape(i).x_End,
									nwd.yLocation + nwd.GetShape(i).y_End,
									nwd.GetShape(i).Color,
									int(nwd.GetShape(i).Alpha * 255));
					break;
				case ZShape.thickbox:
					// Top
					Screen.DrawThickLine((nwd.xLocation + nwd.GetShape(i).x_Start) - nwd.GetShape(i).Thickness,
									(nwd.yLocation + nwd.GetShape(i).y_Start) - (nwd.GetShape(i).Thickness > 1 ? (nwd.GetShape(i).Thickness % 2 == 0 ? nwd.GetShape(i).Thickness / 2 : ((nwd.GetShape(i).Thickness - 1) / 2) + 1) : nwd.GetShape(i).Thickness),
									(nwd.xLocation + nwd.GetShape(i).x_End) + nwd.GetShape(i).Thickness,
									(nwd.yLocation + nwd.GetShape(i).y_Start) - (nwd.GetShape(i).Thickness > 1 ? (nwd.GetShape(i).Thickness % 2 == 0 ? nwd.GetShape(i).Thickness / 2 : ((nwd.GetShape(i).Thickness - 1) / 2) + 1) : nwd.GetShape(i).Thickness),
									nwd.GetShape(i).Thickness, 
									nwd.GetShape(i).Color,
									int(nwd.GetShape(i).Alpha * 255));
					// Bottom
					Screen.DrawThickLine((nwd.xLocation + nwd.GetShape(i).x_Start) - nwd.GetShape(i).Thickness,
									(nwd.yLocation + nwd.GetShape(i).y_End) + (nwd.GetShape(i).Thickness > 1 ? (nwd.GetShape(i).Thickness % 2 == 0 ? nwd.GetShape(i).Thickness / 2 : (nwd.GetShape(i).Thickness - 1) / 2) : nwd.GetShape(i).Thickness),
									(nwd.xLocation + nwd.GetShape(i).x_End) + nwd.GetShape(i).Thickness,
									(nwd.yLocation + nwd.GetShape(i).y_End) + (nwd.GetShape(i).Thickness > 1 ? (nwd.GetShape(i).Thickness % 2 == 0 ? nwd.GetShape(i).Thickness / 2 : (nwd.GetShape(i).Thickness - 1) / 2) : nwd.GetShape(i).Thickness),
									nwd.GetShape(i).Thickness, 
									nwd.GetShape(i).Color,
									int(nwd.GetShape(i).Alpha * 255));
					// Left
					Screen.DrawThickLine((nwd.xLocation + nwd.GetShape(i).x_Start) - (nwd.GetShape(i).Thickness > 1 ? (nwd.GetShape(i).Thickness % 2 == 0 ? nwd.GetShape(i).Thickness / 2 : (nwd.GetShape(i).Thickness - 1) / 2) : nwd.GetShape(i).Thickness),
									nwd.yLocation + nwd.GetShape(i).y_Start,
									(nwd.xLocation + nwd.GetShape(i).x_Start) - (nwd.GetShape(i).Thickness > 1 ? (nwd.GetShape(i).Thickness % 2 == 0 ? nwd.GetShape(i).Thickness / 2 : (nwd.GetShape(i).Thickness - 1) / 2) : nwd.GetShape(i).Thickness),
									nwd.yLocation + nwd.GetShape(i).y_End,
									nwd.GetShape(i).Thickness,
									nwd.GetShape(i).Color,
									int(nwd.GetShape(i).Alpha * 255));
					// Right
					Screen.DrawThickLine((nwd.xLocation + nwd.GetShape(i).x_End) + (nwd.GetShape(i).Thickness > 1 ? (nwd.GetShape(i).Thickness % 2 == 0 ? nwd.GetShape(i).Thickness / 2 : ((nwd.GetShape(i).Thickness - 1) / 2) + 1) : nwd.GetShape(i).Thickness),
									nwd.yLocation + nwd.GetShape(i).y_Start,
									(nwd.xLocation + nwd.GetShape(i).x_End) + (nwd.GetShape(i).Thickness > 1 ? (nwd.GetShape(i).Thickness % 2 == 0 ? nwd.GetShape(i).Thickness / 2 : ((nwd.GetShape(i).Thickness - 1) / 2) + 1) : nwd.GetShape(i).Thickness),
									nwd.yLocation + nwd.GetShape(i).y_End,
									nwd.GetShape(i).Thickness,
									nwd.GetShape(i).Color,
									int(nwd.GetShape(i).Alpha * 255));
					break;
				case ZShape.roundbox:
					// Top
					Screen.DrawLine(nwd.xLocation + nwd.GetShape(i).x_Start + nwd.GetShape(i).Radius,
									nwd.yLocation + nwd.GetShape(i).y_Start,
									nwd.xLocation + nwd.GetShape(i).x_End - nwd.GetShape(i).Radius,
									nwd.yLocation + nwd.GetShape(i).y_Start,
									nwd.GetShape(i).Color,
									int(nwd.GetShape(i).Alpha * 255));
					// Bottom
					Screen.DrawLine(nwd.xLocation + nwd.GetShape(i).x_Start + nwd.GetShape(i).Radius,
									nwd.yLocation + nwd.GetShape(i).y_End,
									nwd.xLocation + nwd.GetShape(i).x_End - nwd.GetShape(i).Radius,
									nwd.yLocation + nwd.GetShape(i).y_End,
									nwd.GetShape(i).Color,
									int(nwd.GetShape(i).Alpha * 255));
					// Left
					Screen.DrawLine(nwd.xLocation + nwd.GetShape(i).x_Start,
									nwd.yLocation + nwd.GetShape(i).y_Start + nwd.GetShape(i).Radius,
									nwd.xLocation + nwd.GetShape(i).x_Start,
									nwd.yLocation + nwd.GetShape(i).y_End - nwd.GetShape(i).Radius,
									nwd.GetShape(i).Color,
									int(nwd.GetShape(i).Alpha * 255));
					// Right
					Screen.DrawLine(nwd.xLocation + nwd.GetShape(i).x_End,
									nwd.yLocation + nwd.GetShape(i).y_Start + nwd.GetShape(i).Radius,
									nwd.xLocation + nwd.GetShape(i).x_End,
									nwd.yLocation + nwd.GetShape(i).y_End - nwd.GetShape(i).Radius,
									nwd.GetShape(i).Color,
									int(nwd.GetShape(i).Alpha * 255));
									
					ang = 90 / nwd.GetShape(i).Vertices;
					// Upper Left
					originx = nwd.xLocation + nwd.GetShape(i).x_Start + nwd.GetShape(i).Radius;
					originy = nwd.yLocation + nwd.GetShape(i).y_Start + nwd.GetShape(i).Radius;
					cxstart = nwd.xLocation + nwd.GetShape(i).x_Start;
					cystart = nwd.yLocation + nwd.GetShape(i).y_Start + nwd.GetShape(i).Radius;
					for (int j = 0; j < nwd.GetShape(i).Vertices; j++)
					{
						cxend = originx - cos(ang * j) * nwd.GetShape(i).Radius;
						if (j == nwd.GetShape(i).Vertices - 1)
							cxend = nwd.xLocation + nwd.GetShape(i).x_Start + nwd.GetShape(i).Radius;
						cyend = originy - sin(ang * j) * nwd.GetShape(i).Radius;
						Screen.DrawLine(cxstart, cystart, cxend, cyend, nwd.GetShape(i).Color, int(nwd.GetShape(i).Alpha * 255));
						cxstart = cxend;
						cystart = cyend;
					}
					
					// Upper Right
					originx = nwd.xLocation + nwd.GetShape(i).x_End - nwd.GetShape(i).Radius;
					originy = nwd.yLocation + nwd.Getshape(i).y_Start + nwd.GetShape(i).Radius;
					cxstart = nwd.xLocation + nwd.GetShape(i).x_End - nwd.GetShape(i).Radius;
					cystart = nwd.yLocation + nwd.GetShape(i).y_Start;
					for (int j = 0; j < nwd.GetShape(i).Vertices; j++)
					{
						cxend = originx - cos(90 + ang * j) * nwd.GetShape(i).Radius;
						cyend = originy - sin(90 + ang * j) * nwd.GetShape(i).Radius;
						if (j == nwd.GetShape(i).Vertices - 1)
							cyend = nwd.yLocation + nwd.GetShape(i).y_Start + nwd.GetShape(i).Radius;
						Screen.DrawLine(cxstart, cystart, cxend, cyend, nwd.GetShape(i).Color, int(nwd.GetShape(i).Alpha * 255));
						cxstart = cxend;
						cystart = cyend;					
					}
					// Lower Left
					originx = nwd.xLocation + nwd.GetShape(i).x_Start + nwd.GetShape(i).Radius;
					originy = nwd.yLocation + nwd.Getshape(i).y_End - nwd.GetShape(i).Radius;
					cxstart = nwd.xLocation + nwd.GetShape(i).x_Start + nwd.GetShape(i).Radius;
					cystart = nwd.yLocation + nwd.GetShape(i).y_End;
					for (int j = 0; j < nwd.GetShape(i).Vertices; j++)
					{
						cxend = originx - cos(270 + ang * j) * nwd.GetShape(i).Radius;
						cyend = originy - sin(270 + ang * j) * nwd.GetShape(i).Radius;
						if (j == nwd.GetShape(i).Vertices - 1)
							cyend = nwd.yLocation + nwd.GetShape(i).y_End - nwd.GetShape(i).Radius;
						Screen.DrawLine(cxstart, cystart, cxend, cyend, nwd.GetShape(i).Color, int(nwd.GetShape(i).Alpha * 255));
						cxstart = cxend;
						cystart = cyend;					
					}
					// Lower Right
					originx = nwd.xLocation + nwd.GetShape(i).x_End - nwd.GetShape(i).Radius;
					originy = nwd.yLocation + nwd.Getshape(i).y_End - nwd.GetShape(i).Radius;
					cxstart = nwd.xLocation + nwd.GetShape(i).x_End;
					cystart = nwd.yLocation + nwd.GetShape(i).y_End - nwd.GetShape(i).Radius;
					for (int j = 0; j < nwd.GetShape(i).Vertices; j++)
					{
						cxend = originx - cos(180 + ang * j) * nwd.GetShape(i).Radius;
						if (j == nwd.GetShape(i).Vertices - 1)
							cxend = nwd.xLocation + nwd.GetShape(i).x_End - nwd.GetShape(i).Radius;
						cyend = originy - sin(180 + ang * j) * nwd.GetShape(i).Radius;
						Screen.DrawLine(cxstart, cystart, cxend, cyend, nwd.GetShape(i).Color, int(nwd.GetShape(i).Alpha * 255));
						cxstart = cxend;
						cystart = cyend;					
					}					
					break;
				case ZShape.roundthickbox:
					// Top
					Screen.DrawThickLine(nwd.xLocation + nwd.GetShape(i).x_Start + nwd.GetShape(i).Radius,
									nwd.yLocation + nwd.GetShape(i).y_Start,
									nwd.xLocation + nwd.GetShape(i).x_End - nwd.GetShape(i).Radius,
									nwd.yLocation + nwd.GetShape(i).y_Start,
									nwd.GetShape(i).Thickness,
									nwd.GetShape(i).Color,
									int(nwd.GetShape(i).Alpha * 255));
					// Bottom
					Screen.DrawThickLine(nwd.xLocation + nwd.GetShape(i).x_Start + nwd.GetShape(i).Radius,
									nwd.yLocation + nwd.GetShape(i).y_End,
									nwd.xLocation + nwd.GetShape(i).x_End - nwd.GetShape(i).Radius,
									nwd.yLocation + nwd.GetShape(i).y_End,
									nwd.GetShape(i).Thickness,
									nwd.GetShape(i).Color,
									int(nwd.GetShape(i).Alpha * 255));
					// Left
					Screen.DrawThickLine(nwd.xLocation + nwd.GetShape(i).x_Start,
									nwd.yLocation + nwd.GetShape(i).y_Start + nwd.GetShape(i).Radius,
									nwd.xLocation + nwd.GetShape(i).x_Start,
									nwd.yLocation + nwd.GetShape(i).y_End - nwd.GetShape(i).Radius,
									nwd.GetShape(i).Thickness,
									nwd.GetShape(i).Color,
									int(nwd.GetShape(i).Alpha * 255));
					// Right
					Screen.DrawThickLine(nwd.xLocation + nwd.GetShape(i).x_End,
									nwd.yLocation + nwd.GetShape(i).y_Start + nwd.GetShape(i).Radius,
									nwd.xLocation + nwd.GetShape(i).x_End,
									nwd.yLocation + nwd.GetShape(i).y_End - nwd.GetShape(i).Radius,
									nwd.GetShape(i).Thickness,
									nwd.GetShape(i).Color,
									int(nwd.GetShape(i).Alpha * 255));
									
					ang = 90 / nwd.GetShape(i).Vertices;
					// Upper Left
					originx = nwd.xLocation + nwd.GetShape(i).x_Start + nwd.GetShape(i).Radius; 
					originy = nwd.yLocation + nwd.GetShape(i).y_Start + nwd.GetShape(i).Radius;
					cxstart = nwd.xLocation + nwd.GetShape(i).x_Start;
					cystart = nwd.yLocation + nwd.GetShape(i).y_Start + nwd.GetShape(i).Radius;
					for (int j = 0; j < nwd.GetShape(i).Vertices; j++)
					{
						cxend = originx - cos(ang * j) * nwd.GetShape(i).Radius;
						if (j == nwd.GetShape(i).Vertices - 1)
							cxend = nwd.xLocation + nwd.GetShape(i).x_Start + nwd.GetShape(i).Radius;
						cyend = originy - sin(ang * j) * nwd.GetShape(i).Radius;
						Screen.DrawThickLine(cxstart, cystart, cxend, cyend, nwd.GetShape(i).Thickness, nwd.GetShape(i).Color, int(nwd.GetShape(i).Alpha * 255));
						cxstart = cxend;
						cystart = cyend;
					}
					
					// Upper Right
					originx = nwd.xLocation + nwd.GetShape(i).x_End - nwd.GetShape(i).Radius;
					originy = nwd.yLocation + nwd.Getshape(i).y_Start + nwd.GetShape(i).Radius;
					cxstart = nwd.xLocation + nwd.GetShape(i).x_End - nwd.GetShape(i).Radius;
					cystart = nwd.yLocation + nwd.GetShape(i).y_Start;
					for (int j = 0; j < nwd.GetShape(i).Vertices; j++)
					{
						cxend = originx - cos(90 + ang * j) * nwd.GetShape(i).Radius;
						cyend = originy - sin(90 + ang * j) * nwd.GetShape(i).Radius;
						if (j == nwd.GetShape(i).Vertices - 1)
							cyend = nwd.yLocation + nwd.GetShape(i).y_Start + nwd.GetShape(i).Radius;
						Screen.DrawThickLine(cxstart, cystart, cxend, cyend, nwd.GetShape(i).Thickness, nwd.GetShape(i).Color, int(nwd.GetShape(i).Alpha * 255));
						cxstart = cxend;
						cystart = cyend;					
					}
					// Lower Left
					originx = nwd.xLocation + nwd.GetShape(i).x_Start + nwd.GetShape(i).Radius;
					originy = nwd.yLocation + nwd.Getshape(i).y_End - nwd.GetShape(i).Radius;
					cxstart = nwd.xLocation + nwd.GetShape(i).x_Start + nwd.GetShape(i).Radius;
					cystart = nwd.yLocation + nwd.GetShape(i).y_End;
					for (int j = 0; j < nwd.GetShape(i).Vertices; j++)
					{
						cxend = originx - cos(270 + ang * j) * nwd.GetShape(i).Radius;
						cyend = originy - sin(270 + ang * j) * nwd.GetShape(i).Radius;
						if (j == nwd.GetShape(i).Vertices - 1)
							cyend = nwd.yLocation + nwd.GetShape(i).y_End - nwd.GetShape(i).Radius;
						Screen.DrawThickLine(cxstart, cystart, cxend, cyend, nwd.GetShape(i).Thickness, nwd.GetShape(i).Color, int(nwd.GetShape(i).Alpha * 255));
						cxstart = cxend;
						cystart = cyend;					
					}
					// Lower Right
					originx = nwd.xLocation + nwd.GetShape(i).x_End - nwd.GetShape(i).Radius;
					originy = nwd.yLocation + nwd.Getshape(i).y_End - nwd.GetShape(i).Radius;
					cxstart = nwd.xLocation + nwd.GetShape(i).x_End;
					cystart = nwd.yLocation + nwd.GetShape(i).y_End - nwd.GetShape(i).Radius;
					for (int j = 0; j < nwd.GetShape(i).Vertices; j++)
					{
						cxend = originx - cos(180 + ang * j) * nwd.GetShape(i).Radius;
						if (j == nwd.GetShape(i).Vertices - 1)
							cxend = nwd.xLocation + nwd.GetShape(i).x_End - nwd.GetShape(i).Radius;
						cyend = originy - sin(180 + ang * j) * nwd.GetShape(i).Radius;
						Screen.DrawThickLine(cxstart, cystart, cxend, cyend, nwd.GetShape(i).Thickness, nwd.GetShape(i).Color, int(nwd.GetShape(i).Alpha * 255));
						cxstart = cxend;
						cystart = cyend;					
					}
					break;
			}
		}
		WindowClip(set:false);
	}
	
	//
	// One of the only public ui draw methods,
	// this will either set the clipping rectangle to the window dimensions,
	// or clear the clipping rectangle.
	//
	ui void WindowClip(ZSWindow nwd = null, bool set = true)
	{
		if (set)
			Screen.SetClipRect(nwd.xLocation, nwd.yLocation, nwd.Width, nwd.Height);		
		else
			Screen.ClearClipRect();
	}
	
	override void WorldTick()
	{
		//
		// - Debug messages
		//
		
		// If there is a console window and debugging is off, tell it to destroy itself
		if (ncon && !bDebug)
			ZSWin_Base(ncon).bDestroyed = true;
		// There is no console window and there should be, so call up old croney ACS to get a console window.
		// Seems hacky but its the legit method here - windows are actors!
		else if (!ncon && bDebug)
			CallACS("ZSWin_SpawnConsole", 0, debugPlayer);
		
		// Iterate through the debug messages - if it still has time to display it gets passed to the new array,
		// otherwise it's skipped and erased.
		Array<ZText> newMsgs;
		for (int i = 0; i < dar_DebugMsgs.Size(); i++)
		{
			if (ZText(dar_DebugMsgs[i]).tics > 0)
			{
				ZText(dar_DebugMsgs[i]).tics--;
				newMsgs.Push(new("ZText").DebugInit(ZText(dar_DebugMsgs[i]).Text, 
											ZText(dar_DebugMsgs[i]).CRColor, 
											ZText(dar_DebugMsgs[i]).Tics, 
											ZText(dar_DebugMsgs[i]).TicAppend));
			}		
		}
		
		// Clear out old messages and add in the new ones
		dar_DebugMsgs.Clear();
		dar_DebugMsgs.Move(newMsgs);
		// Update the console window
		if (ncon)
		{
			bDebugIsUpdating = true; // Whichever window is the console will be looking at this to know it's being updated
			ncon.IsUpdating();		 // Makes copies of the window arrays for use until updating is done.
								     // - The problem is actually RenderOveraly going at the framerate and WorldTick going at script speed!
									 // - I'm basically having to multi-thread these classes to keep stuff synced!!
									 
			// Ok obviously this loop pushes the new messages to the console window :P
			for (int i = 0; i < dar_DebugMsgs.Size(); i++)
			{
				ncon.Text.Push(new("ZText").Init(ZText(dar_DebugMsgs[i]).TicAppend ? 
													string.Format("%s : tics - %d", ZText(dar_DebugMsgs[i]).Text, ZText(dar_DebugMsgs[i]).Tics) : 
													ZText(dar_DebugMsgs[i]).Text,
												ZText(dar_DebugMsgs[i]).CRColor,
												ZText.nowrap,
												ZText.left,
												"newsmallfont",
												0,
												30 + (20 * i)));
			}
		}
		
		// Window Processing Stack Monitor
		//
		// Windows need to tell the handler that they need to go away, basically asking permission to be destroyed.
		// The reason for this is that the window stack needs to be updated if a window is being destroyed.
		// This loop looks for windows that have requested to be purged, tells them go ahead, and skips them when
		// adding windows to the new stack array.  Last step is clear out the actual stack array and move over the
		// new stack of windows.
		Array<ZSWin_Base> newStack;
		for (int i = 0; i < winStack.Size(); i++)
		{
			if (!ZSWindow(winStack[i]).bStackPurged)
				newStack.Push(winStack[i]);
			else
				winStack[i].bDestroyed = true;
		}
		
		DebugOut(string.Format("ZSWin Handler - Processing Stack contains %d objects, New Stack contains %d objects, %d objects destroyed.", winStack.Size(), newStack.Size(), winStack.Size() - newStack.Size()), Font.CR_LightBlue, 175, true);
			
		if (winStack.Size() != newStack.Size())
		{
			winStack.Clear();
			winStack.Move(newStack);
		}
	}
	
	/* - END OF METHODS - */
}